{"version":3,"sources":["components/Quote.js","App.js","serviceWorker.js","index.js"],"names":["Quote","state","quote","author","generateQuote","fetch","then","response","json","data","randomIndex","Math","floor","random","length","this","setState","text","generateBackground","props","backgroundColour","handleClick","className","id","Button","color","onClick","href","target","rel","Component","App","changeBGColour","bgColour","toString","substr","bg","style","backgroundColor","Card","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yQAKqBA,G,kNACnBC,MAAQ,CACNC,MAAO,GACPC,OAAQ,I,EAQVC,cAAgB,WACdC,MAAM,+BACHC,MAAK,SAAUC,GACd,OAAOA,EAASC,UAEjBF,MAAK,SAAUG,GACd,IAAMC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAKK,QACpDC,KAAKC,SAAS,CACZd,MAAOO,EAAKC,GAAaO,KACzBd,OAAQM,EAAKC,GAAaP,a,EAclCe,mBAAqB,WACnB,EAAKC,MAAMC,oB,EAGbC,YAAc,WACZ,EAAKjB,gBACL,EAAKc,sB,kEAjCLH,KAAKX,gBACLW,KAAKG,uB,+BAoCL,OACE,6BACE,uBAAGI,UAAU,OAAOC,GAAG,QACrB,+BAAKR,KAAKd,MAAMC,MAAhB,MAEF,uBAAGoB,UAAU,OAAOC,GAAG,UACrB,iCAAOR,KAAKd,MAAME,SAEpB,kBAACqB,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAASX,KAAKM,YAAaE,GAAG,aAAtD,kBAGA,6BACA,uBACED,UAAU,4BACVC,GAAG,cACHI,KAAI,iDAA4CZ,KAAKd,MAAMC,MAAvD,eAAmEa,KAAKd,MAAME,QAClFyB,OAAO,SACPC,IAAI,uBAEJ,uBAAGP,UAAU,mBACb,uBAAGA,UAAU,QAAb,0B,GAhEyBQ,cC4BpBC,E,kDA3Bb,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IAMRa,eAAiB,WACf,IAAMC,EACJ,KAAO,SAA4B,SAAhBtB,KAAKE,UAAqBqB,SAAS,IAAIC,OAAO,EAAG,GACtE,EAAKnB,SAAS,CACZoB,GAAIH,KATN,EAAKhC,MAAQ,CACXmC,GAAI,IAHW,E,qDAgBjB,OACE,yBAAKb,GAAG,YAAYc,MAAO,CAAEC,gBAAiBvB,KAAKd,MAAMmC,KACvD,wBAAId,UAAU,aAAd,eACA,kBAACiB,EAAA,EAAD,CAAMjB,UAAU,sBACd,kBAAC,EAAD,CAAOF,iBAAkBL,KAAKiB,uB,GArBtBF,aCOEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.69cfbd0e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport \"@fortawesome/fontawesome-free/js/all.js\";\r\nimport \"../App.css\";\r\n\r\nexport default class Quote extends Component {\r\n  state = {\r\n    quote: \"\",\r\n    author: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.generateQuote();\r\n    this.generateBackground();\r\n  }\r\n\r\n  generateQuote = () => {\r\n    fetch(\"https://type.fit/api/quotes\")\r\n      .then(function (response) {\r\n        return response.json();\r\n      })\r\n      .then(function (data) {\r\n        const randomIndex = Math.floor(Math.random() * data.length);\r\n        this.setState({\r\n          quote: data[randomIndex].text,\r\n          author: data[randomIndex].author,\r\n        });\r\n      });\r\n\r\n    // fetch(\"http://quotes.stormconsultancy.co.uk/random.json\")\r\n    //   .then((response) => response.json())\r\n    //   .then((data) =>\r\n    //     this.setState({\r\n    //       quote: data.quote,\r\n    //       author: data.author,\r\n    //     })\r\n    //   );\r\n  };\r\n\r\n  generateBackground = () => {\r\n    this.props.backgroundColour();\r\n  };\r\n\r\n  handleClick = () => {\r\n    this.generateQuote();\r\n    this.generateBackground();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p className=\"lead\" id=\"text\">\r\n          <b>\"{this.state.quote}\"</b>\r\n        </p>\r\n        <p className=\"lead\" id=\"author\">\r\n          <em>- {this.state.author}</em>\r\n        </p>\r\n        <Button color=\"primary\" onClick={this.handleClick} id=\"new-quote\">\r\n          Generate Quote\r\n        </Button>\r\n        <hr />\r\n        <a\r\n          className=\"twitter-share-button mx-3\"\r\n          id=\"tweet-quote\"\r\n          href={`https://twitter.com/intent/tweet?text=\"${this.state.quote}\" - ${this.state.author}`}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <i className=\"fab fa-twitter\" />\r\n          <p className=\"lead\">Tweet this quote</p>\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Card } from \"reactstrap\";\nimport Quote from \"./components/Quote.js\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bg: \"\",\n    };\n  }\n\n  changeBGColour = () => {\n    const bgColour =\n      \"#\" + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6);\n    this.setState({\n      bg: bgColour,\n    });\n  };\n\n  render() {\n    return (\n      <div id=\"quote-box\" style={{ backgroundColor: this.state.bg }}>\n        <h1 className=\"display-4\">#Inspire-me</h1>\n        <Card className=\"m-auto text-center\">\n          <Quote backgroundColour={this.changeBGColour} />\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}